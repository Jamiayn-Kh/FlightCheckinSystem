@page "/flightboard"
@using FlightCheckin.Models
@using FlightCheckin.Web.Services
@using System.Text.Json
@implements IAsyncDisposable
@inject IHttpClientFactory HttpClientFactory
@inject IFlightUpdateService FlightUpdateService

<PageTitle>Flight Board</PageTitle>

<div class="container-fluid">
    <h1 class="text-center mb-4">Flight Information Board</h1>
    
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Live Flight Status</h5>
                </div>
                <div class="card-body">
                    @if (flights == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Flight Number</th>
                                        <th>Destination</th>
                                        <th>Departure Time</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var flight in flights)
                                    {
                                        <tr class="@GetStatusClass(flight.Status)">
                                            <td><strong>@flight.FlightNumber</strong></td>
                                            <td>@flight.Destination</td>
                                            <td>@flight.DepartureTime.ToString("HH:mm")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(flight.Status)">
                                                    @GetStatusText(flight.Status)
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary" @onclick="() => ShowSeats(flight.FlightNumber)">
                                                    View Seats
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (selectedFlight != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Seats for Flight @selectedFlight</h5>
                        <button class="btn btn-sm btn-secondary float-end" @onclick="CloseSeats">Close</button>
                    </div>
                    <div class="card-body">
                        @if (seats == null)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading seats...</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="seat-map">
                                @for (int row = 1; row <= 10; row++)
                                {
                                    <div class="seat-row">
                                        <span class="row-number">@row</span>
                                        @foreach (var col in new[] { "A", "B", "C", "D", "E", "F" })
                                        {
                                            var seat = seats.FirstOrDefault(s => s.Row == row && s.Column == col);
                                            var seatClass = seat?.IsTaken == true ? "seat-taken" : "seat-available";
                                            var seatText = seat?.IsTaken == true ? "X" : $"{row}{col}";
                                            
                                            <div class="seat @seatClass" title="@(seat?.AssignedPassengerName ?? "Available")">
                                                @seatText
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            
                            <div class="mt-3">
                                <div class="d-flex gap-3">
                                    <div class="d-flex align-items-center">
                                        <div class="seat seat-available me-2"></div>
                                        <span>Available</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <div class="seat seat-taken me-2"></div>
                                        <span>Taken</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<FlightDto>? flights;
    private List<SeatDto>? seats;
    private string? selectedFlight;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to SignalR events
        FlightUpdateService.FlightStatusUpdated += OnFlightStatusUpdated;
        FlightUpdateService.SeatAssigned += OnSeatAssigned;
        FlightUpdateService.SeatsUpdated += OnSeatsUpdated;
        
        await LoadFlights();
        await JoinFlightGroups();
    }

    private async Task LoadFlights()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("server");
            var response = await httpClient.GetAsync("api/flight");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                flights = JsonSerializer.Deserialize<List<FlightDto>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flights: {ex.Message}");
        }
    }

    private void OnFlightStatusUpdated(string flightNumber, FlightStatus status)
    {
        if (flights != null)
        {
            var flight = flights.FirstOrDefault(f => f.FlightNumber == flightNumber);
            if (flight != null)
            {
                flight.Status = status;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnSeatAssigned(string flightNumber, string seatCode)
    {
        Console.WriteLine($"[DEBUG] OnSeatAssigned called: {flightNumber} -> {seatCode}");
        if (selectedFlight == flightNumber)
        {
            Console.WriteLine($"[DEBUG] Refreshing seats for selected flight: {flightNumber}");
            InvokeAsync(async () => 
            {
                await LoadSeats(flightNumber);
                StateHasChanged();
            });
        }
    }

    private void OnSeatsUpdated(string flightNumber)
    {
        Console.WriteLine($"[DEBUG] OnSeatsUpdated called: {flightNumber}");
        Console.WriteLine($"[DEBUG] Current selectedFlight: {selectedFlight}");
        
        // Always refresh if we're viewing the seat map for this flight
        if (selectedFlight == flightNumber)
        {
            Console.WriteLine($"[DEBUG] Refreshing seats for flight: {flightNumber}");
            InvokeAsync(async () => 
            {
                await LoadSeats(flightNumber);
                StateHasChanged();
            });
        }
        // Also trigger a general refresh for any flight-related updates
        else
        {
            Console.WriteLine($"[DEBUG] General state refresh triggered");
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task JoinFlightGroups()
    {
        if (flights != null)
        {
            foreach (var flight in flights)
            {
                await FlightUpdateService.JoinFlightGroup(flight.FlightNumber);
            }
        }
    }

    private async Task ShowSeats(string flightNumber)
    {
        selectedFlight = flightNumber;
        await LoadSeats(flightNumber);
    }

    private async Task LoadSeats(string flightNumber)
    {
        try
        {
            Console.WriteLine($"[DEBUG] LoadSeats called for flight: {flightNumber}");
            var httpClient = HttpClientFactory.CreateClient("server");
            var response = await httpClient.GetAsync($"api/checkin/seats/{flightNumber}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var newSeats = JsonSerializer.Deserialize<List<SeatDto>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                seats = newSeats;
                Console.WriteLine($"[DEBUG] Loaded {seats?.Count} seats for flight {flightNumber}");
            }
            else
            {
                Console.WriteLine($"[DEBUG] Failed to load seats: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading seats: {ex.Message}");
        }
    }

    private void CloseSeats()
    {
        selectedFlight = null;
        seats = null;
    }

    private string GetStatusClass(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "table-info",
        FlightStatus.Boarding => "table-warning",
        FlightStatus.Departed => "table-success",
        FlightStatus.Delayed => "table-danger",
        FlightStatus.Cancelled => "table-secondary",
        _ => ""
    };

    private string GetStatusBadgeClass(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "bg-info",
        FlightStatus.Boarding => "bg-warning",
        FlightStatus.Departed => "bg-success",
        FlightStatus.Delayed => "bg-danger",
        FlightStatus.Cancelled => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStatusText(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "Checking In",
        FlightStatus.Boarding => "Boarding",
        FlightStatus.Departed => "Departed",
        FlightStatus.Delayed => "Delayed",
        FlightStatus.Cancelled => "Cancelled",
        _ => status.ToString()
    };

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events
        FlightUpdateService.FlightStatusUpdated -= OnFlightStatusUpdated;
        FlightUpdateService.SeatAssigned -= OnSeatAssigned;
        FlightUpdateService.SeatsUpdated -= OnSeatsUpdated;
    }
}

<style>
    .seat-map {
        display: flex;
        flex-direction: column;
        gap: 5px;
        max-width: 600px;
        margin: 0 auto;
    }

    .seat-row {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .row-number {
        width: 30px;
        text-align: center;
        font-weight: bold;
    }

    .seat {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid #ccc;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s;
    }

    .seat-available {
        background-color: #d4edda;
        border-color: #28a745;
        color: #155724;
    }

    .seat-taken {
        background-color: #f8d7da;
        border-color: #dc3545;
        color: #721c24;
    }

    .seat:hover {
        transform: scale(1.1);
    }
</style>
